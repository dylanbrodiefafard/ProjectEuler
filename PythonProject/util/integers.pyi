from typing import Iterator, Iterable, Any, Tuple, Collection


def prepend_digits(digits: int, number: int) -> int: ...
def append_digits(number: int, digits: int) -> int: ...
def is_palindrome(n: int) -> bool: ...
def digital_sum(n: int) -> int: ...
def pythagorean_triples(max_perimeter: int) -> Iterator[tuple[int, int, int]]: ...
def prime_factors(number: int) -> Iterator[tuple[int, int]]: ...
def num_partitions(n: int) -> int: ...
def multiplicative_partitions(n: int) -> Iterator[tuple[int]]: ...
def num_divisors(n: int) -> int: ...
def aliquot_sum(n: int) -> int: ...
def positive_divisors(n: int) -> Iterator[int]: ...
def divisors_from_prime_factors(factors: Iterator[Tuple[int, int]]) -> Iterator[int]: ...
def factorial(n: int) -> int: ...
def multiplicative_order(a: int, m: int) -> int: ...
def sqrt_continued_fraction_finite(n: int) -> Tuple[int]: ...
def sqrt_continued_fraction(n: int) -> Iterator[int]: ...
def continued_fraction_convergents(continued_fractions: Iterable[int]) -> Iterator[Tuple[int, int]]: ...
def is_square(n: int) -> bool: ...
def eulers_totient(n: int) -> int: ...
def moebius(n: int) -> int: ...
def totient_sum(n: int) -> int: ...
def num_proper_permutations_of_digits(n: Collection[Any], zero_value: Any = 0) -> int: ...

class _PositiveInfinity(object):
    def __eq__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...

class _NegativeInfinity(object):
    def __eq__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...

POSITIVE_INFINITY: _PositiveInfinity
NEGATIVE_INFINITY: _NegativeInfinity