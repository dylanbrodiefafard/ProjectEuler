from typing import Optional, List, Set, Dict, Tuple, Iterable


class Vertex:
    _name: str
    _neighbours: Set[Vertex]
    name: str
    def __init__(self: Vertex, name: str) -> Vertex: ...
    def __iter__(self: Vertex) -> Iterable[Vertex]: ...
    def add_neighbour(self: Vertex, neighbour: Vertex) -> None: ...

class Graph:
    _vertices_by_name: Dict[str, Vertex]
    _distances: Dict[Tuple[Vertex, Vertex], float]
    def __init__(self: Graph) -> Graph: ...
    def __iter__(self: Graph) -> Iterable[Vertex]: ...
    def add_edge(self: Graph, vertex1: Vertex, vertex2: Vertex, distance: float, directed: bool = False) -> None: ...
    def vertex(self: Graph, name: str, create: bool = False) -> Vertex: ...
    def distance(self, vertex1: Vertex, vertex2: Vertex) -> float: ...

def dijkstra(graph: Graph, source: Vertex, destination: Optional[Vertex] = None) -> Tuple[float, List[Vertex]]: ...
